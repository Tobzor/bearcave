const { rootPath, join } = require("./root");

const transpiler = {
    test: /\.(js|jsx|tsx|ts)$/,
    exclude: [/node_modules/, /build/],
    use: {
        loader: "babel-loader",
        options: {
            cacheDirectory: true,
        },
    },
};

const html = {
    test: /\.html$/,
    use: [{ loader: "html-loader" }],
};

const styles = {
    test: /\.(css)$/,
    include: [join(rootPath, "/src")],
    use: [
        { loader: "style-loader" },
        {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
                banner: "// AUTOGENERATED TYPINGS, these should not be edited.",
                eol: "\n",
            },
        },
        { loader: "css-loader", options: { modules: true } },
    ],
};

const images = {
    test: /\.(png|jpg|gif|jpeg)$/,
    include: [join(rootPath, "/resources/images")],
    use: [
        {
            loader: "cache-loader",
        },
        {
            loader: "file-loader",
            options: {
                name: "[name].[ext]",
                outputPath: "./resources/images/",
            },
        },
    ],
};

const icons = {
    test: /\.svg$/,
    use: [
        {
            loader: "@svgr/webpack",
            options: {
                native: false,
            },
        },
        { loader: "url-loader" },
    ],
};

const fonts = {
    test: /.(ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,
    include: [
        join(rootPath, "/resources/fonts"),
        join(rootPath, "/node_modules/css-loader"),
        join(rootPath, "/node_modules/less-loader"),
    ],
    use: [
        {
            loader: "file-loader",
            options: {
                outputPath: "resources/fonts/",
                name: "[name].[ext]",
            },
        },
    ],
};

module.exports = {
    fonts,
    icons,
    images,
    styles,
    html,
    transpiler,
    defineBaseRules: function () {
        const baserules = {
            rules: [transpiler, html, styles, images, icons, fonts],
        };
        return baserules;
    },
};
